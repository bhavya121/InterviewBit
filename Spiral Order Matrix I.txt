/*Given a matrix of m * n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example:

Given the following matrix:

[
    [ 1, 2, 3 ],
    [ 4, 5, 6 ],
    [ 7, 8, 9 ]
]
You should return

[1, 2, 3, 6, 9, 8, 7, 4, 5]
*/


/**
 * @input A : Read only ( DON'T MODIFY ) 2D integer array 
 * @input n11 : Integer array's ( A ) rows
 * @input n12 : Integer array's ( A ) columns
 * 
 * @Output Integer array. You need to malloc memory, and fill the length in len1
 */
int* spiralOrder(const int** A, int n11, int n12, int *len1) {
    int n=n11*n12;
    *len1=n11*n12;
    int *arr=(int*)malloc(sizeof(int)*n);
    int x=0;
    int t=0,b=n11;
    int l=0,r=n12;
    int i;
    while(t<b&&l<r)
    {
        for(i=l;i<r;i++,x++)
        {
            arr[x]=A[t][i];
            
        }
        t++;
        for(i=t;i<b;i++,x++)
        {
            arr[x]=A[i][r-1];
        }
        r--;
        if(t<b)
        {
            for(i=r-1;i>=l;i--,x++)
            {
                arr[x]=A[b-1][i];
            }
            b--;
        }
        if(l<r)
        {
            for(i=b-1;i>=t;i--,x++)
            {
                arr[x]=A[i][l];
            }
            l++;
        }
    }
    return arr;
}
